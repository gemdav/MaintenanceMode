// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package maintenancemode.proxies;

public class UserRoleSettings implements com.mendix.systemwideinterfaces.core.IEntityProxy
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject userRoleSettingsMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "MaintenanceMode.UserRoleSettings";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Affected("Affected"),
		UserRoleSettings_UserRole("MaintenanceMode.UserRoleSettings_UserRole");

		private final java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public UserRoleSettings(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, entityName));
	}

	protected UserRoleSettings(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject userRoleSettingsMendixObject)
	{
		if (userRoleSettingsMendixObject == null) {
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		}
		if (!com.mendix.core.Core.isSubClassOf(entityName, userRoleSettingsMendixObject.getType())) {
			throw new java.lang.IllegalArgumentException(String.format("The given object is not a %s", entityName));
		}	

		this.userRoleSettingsMendixObject = userRoleSettingsMendixObject;
		this.context = context;
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 * @param context The context to be used
	 * @param mendixObject The Mendix object for the new instance
	 * @return a new instance of this proxy class
	 */
	public static maintenancemode.proxies.UserRoleSettings initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new maintenancemode.proxies.UserRoleSettings(context, mendixObject);
	}

	public static maintenancemode.proxies.UserRoleSettings load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return maintenancemode.proxies.UserRoleSettings.initialize(context, mendixObject);
	}

	public static java.util.List<maintenancemode.proxies.UserRoleSettings> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		return com.mendix.core.Core.createXPathQuery(String.format("//%1$s%2$s", entityName, xpathConstraint))
			.execute(context)
			.stream()
			.map(obj -> maintenancemode.proxies.UserRoleSettings.initialize(context, obj))
			.collect(java.util.stream.Collectors.toList());
	}

	/**
	 * @return value of Affected
	 */
	public final java.lang.Boolean getAffected()
	{
		return getAffected(getContext());
	}

	/**
	 * @param context
	 * @return value of Affected
	 */
	public final java.lang.Boolean getAffected(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.Affected.toString());
	}

	/**
	 * Set value of Affected
	 * @param affected
	 */
	public final void setAffected(java.lang.Boolean affected)
	{
		setAffected(getContext(), affected);
	}

	/**
	 * Set value of Affected
	 * @param context
	 * @param affected
	 */
	public final void setAffected(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean affected)
	{
		getMendixObject().setValue(context, MemberNames.Affected.toString(), affected);
	}

	/**
	 * @throws com.mendix.core.CoreException
	 * @return value of UserRoleSettings_UserRole
	 */
	public final system.proxies.UserRole getUserRoleSettings_UserRole() throws com.mendix.core.CoreException
	{
		return getUserRoleSettings_UserRole(getContext());
	}

	/**
	 * @param context
	 * @return value of UserRoleSettings_UserRole
	 * @throws com.mendix.core.CoreException
	 */
	public final system.proxies.UserRole getUserRoleSettings_UserRole(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		system.proxies.UserRole result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.UserRoleSettings_UserRole.toString());
		if (identifier != null) {
			result = system.proxies.UserRole.load(context, identifier);
		}
		return result;
	}

	/**
	 * Set value of UserRoleSettings_UserRole
	 * @param userrolesettings_userrole
	 */
	public final void setUserRoleSettings_UserRole(system.proxies.UserRole userrolesettings_userrole)
	{
		setUserRoleSettings_UserRole(getContext(), userrolesettings_userrole);
	}

	/**
	 * Set value of UserRoleSettings_UserRole
	 * @param context
	 * @param userrolesettings_userrole
	 */
	public final void setUserRoleSettings_UserRole(com.mendix.systemwideinterfaces.core.IContext context, system.proxies.UserRole userrolesettings_userrole)
	{
		if (userrolesettings_userrole == null) {
			getMendixObject().setValue(context, MemberNames.UserRoleSettings_UserRole.toString(), null);
		} else {
			getMendixObject().setValue(context, MemberNames.UserRoleSettings_UserRole.toString(), userrolesettings_userrole.getMendixObject().getId());
		}
	}

	@Override
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return userRoleSettingsMendixObject;
	}

	@Override
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this) {
			return true;
		}
		if (obj != null && getClass().equals(obj.getClass()))
		{
			final maintenancemode.proxies.UserRoleSettings that = (maintenancemode.proxies.UserRoleSettings) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

  /**
   * Gives full name ("Module.Entity" name) of the type of the entity.
   *
   * @return the name
   */
	public static java.lang.String getType()
	{
		return entityName;
	}
}
